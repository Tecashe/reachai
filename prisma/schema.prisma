generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  firstName String?
  lastName  String?
  imageUrl  String?
  role      UserRole @default(USER)

  // Subscription
  subscriptionTier   SubscriptionTier   @default(FREE)
  subscriptionId     String?
  customerId         String?
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  currentPeriodEnd   DateTime?

  emailCredits    Int @default(100)
  researchCredits Int @default(50)

  // Usage tracking
  emailsSentThisMonth Int @default(0)
  prospectsThisMonth  Int @default(0)
  aiCreditsUsed       Int @default(0)

  // Onboarding questionnaire
  companyName                      String?
  userRole                         String? // "founder", "sales", "marketing", "other"
  useCase                          String? // "finding_customers", "partnerships", "recruiting", "other"
  monthlyVolume                    String? // "under_500", "500_2000", "over_2000"
  onboardingCompletedQuestionnaire Boolean @default(false)

  // Onboarding progress
  hasCreatedCampaign      Boolean   @default(false)
  hasAddedProspects       Boolean   @default(false)
  hasResearchedProspects  Boolean   @default(false)
  hasGeneratedEmail       Boolean   @default(false)
  hasSentEmail            Boolean   @default(false)
  hasViewedAnalytics      Boolean   @default(false)
  onboardingCompletedAt   DateTime?
  lastOnboardingEmailSent DateTime?
  onboardingEmailsSent    Int       @default(0)

  // Settings
  timezone         String  @default("America/New_York")
  emailSignature   String?
  defaultFromName  String?
  defaultFromEmail String?

  preferences Json? // { scrapingMode: "FAST" | "DEEP", ... }

  subscription    Subscription?
  sendingAccounts SendingAccount[]

  // Relationships
  campaigns          Campaign[]
  prospects          Prospect[]
  emailTemplates     EmailTemplate[]
  integrations       Integration[]
  auditLogs          AuditLog[]
  teamMembers        TeamMember[]
  notifications      Notification[]
  apiKeys            ApiKey[]
  creditTransactions CreditTransaction[]
  creditPurchases    CreditPurchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clerkId])
  @@index([email])
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId       String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Campaign {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  description String?
  status      CampaignStatus @default(DRAFT)

  wizardStep           String @default("prospects") // "prospects", "research", "generate", "review", "launch"
  wizardData           Json? // Store step-specific progress data
  wizardCompletedSteps Json? // Array of completed step IDs

  // Campaign settings
  dailySendLimit  Int     @default(50)
  sendingSchedule Json? // { days: [], startTime: "", endTime: "" }
  trackOpens      Boolean @default(true)
  trackClicks     Boolean @default(true)

  // AI settings
  researchDepth        ResearchDepth        @default(STANDARD)
  personalizationLevel PersonalizationLevel @default(MEDIUM)
  toneOfVoice          String               @default("professional")

  // Stats
  totalProspects  Int @default(0)
  emailsSent      Int @default(0)
  emailsDelivered Int @default(0)
  emailsOpened    Int @default(0)
  emailsClicked   Int @default(0)
  emailsReplied   Int @default(0)
  emailsBounced   Int @default(0)

  // Relationships
  prospects      Prospect[]
  emailSequences EmailSequence[]
  analytics      Analytics[]
  replies        EmailReply[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  launchedAt DateTime?

  @@index([userId])
  @@index([status])
}

model Prospect {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  // Basic info
  email       String
  firstName   String?
  lastName    String?
  company     String?
  jobTitle    String?
  linkedinUrl String?
  websiteUrl  String?

  // Enriched data
  companySize String?
  industry    String?
  location    String?
  phoneNumber String?

  // AI research data
  researchData          Json? // Scraped data, insights, talking points
  qualityScore          Int? // 0-100
  personalizationTokens Json? // Key-value pairs for template variables

  // Email status
  status          ProspectStatus @default(ACTIVE)
  currentStep     Int            @default(0)
  lastContactedAt DateTime?

  // Engagement - detailed tracking
  emailsReceived Int       @default(0) // Total emails sent to this prospect
  emailsOpened   Int       @default(0) // Total times emails were opened
  emailsClicked  Int       @default(0) // Total times links were clicked
  emailsReplied  Int       @default(0) // Total replies received
  replied        Boolean   @default(false) // Has replied at least once
  repliedAt      DateTime?
  bounced        Boolean   @default(false)
  unsubscribed   Boolean   @default(false)

  // Relationships
  emailLogs        EmailLog[]
  sendingSchedules SendingSchedule[]
  replies          EmailReply[]

  timezone           String?
  timezoneDetectedAt DateTime?

  lastReplyAt DateTime?
  replyCount  Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, campaignId])
  @@index([userId])
  @@index([campaignId])
  @@index([email])
  @@index([status])
}

model EmailTemplate {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  description String?
  category    String? // "cold_outreach", "follow_up", "meeting_request"

  subject String
  body    String @db.Text

  // Template variables
  variables Json? // [{ name: "company", required: true }]

  // AI generation settings
  aiGenerated Boolean @default(false)
  basePrompt  String? @db.Text

  // Stats
  timesUsed    Int    @default(0)
  avgOpenRate  Float?
  avgReplyRate Float?

  // Relationships
  emailSequences EmailSequence[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([category])
}

model EmailSequence {
  id         String        @id @default(cuid())
  campaignId String
  campaign   Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  templateId String
  template   EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  stepNumber Int // 1, 2, 3, etc.
  delayDays  Int @default(2) // Days after previous email

  // Conditions
  sendOnlyIfNotReplied Boolean @default(true)
  sendOnlyIfNotOpened  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([campaignId, stepNumber])
  @@index([campaignId])
}

model EmailLog {
  id         String   @id @default(cuid())
  prospectId String
  prospect   Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  // Email details
  subject   String
  body      String @db.Text
  fromEmail String
  toEmail   String

  // Status
  status      EmailStatus @default(QUEUED)
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  repliedAt   DateTime?
  bouncedAt   DateTime?

  // Tracking
  opens      Int     @default(0)
  clicks     Int     @default(0)
  trackingId String? @unique

  recipientTimezone   String?
  sentInBusinessHours Boolean @default(false)

  variant      String? // "A", "B", "C" for A/B testing
  variantGroup String? // Group ID for related variants

  // Error handling
  errorMessage String?
  retryCount   Int     @default(0)

  // Provider info
  provider   String? // "resend", "gmail", "outlook"
  providerId String? // External ID from email provider

  sendingAccountId String?
  sendingAccount   SendingAccount? @relation(fields: [sendingAccountId], references: [id], onDelete: SetNull)

  validationId String?
  validation   EmailValidationResult? @relation(fields: [validationId], references: [id], onDelete: SetNull)

  bounces EmailBounce[]
  replies EmailReply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([prospectId])
  @@index([status])
  @@index([sentAt])
  @@index([sendingAccountId])
  @@index([variantGroup])
}

model Integration {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type IntegrationType
  name String

  // Credentials (encrypted)
  credentials Json // Encrypted API keys, tokens, etc.

  // Status
  isActive     Boolean   @default(true)
  lastSyncedAt DateTime?

  // Settings
  settings Json? // Provider-specific settings

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
  @@index([userId])
}

model Analytics {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  date DateTime @default(now())

  // Daily metrics
  emailsSent      Int @default(0)
  emailsDelivered Int @default(0)
  emailsOpened    Int @default(0)
  emailsClicked   Int @default(0)
  emailsReplied   Int @default(0)
  emailsBounced   Int @default(0)

  // Calculated rates
  deliveryRate Float?
  openRate     Float?
  clickRate    Float?
  replyRate    Float?
  bounceRate   Float?

  createdAt DateTime @default(now())

  @@unique([campaignId, date])
  @@index([campaignId])
  @@index([date])
}

model AuditLog {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  action     String // "campaign.created", "prospect.imported", etc.
  entityType String // "campaign", "prospect", "template"
  entityId   String?

  metadata  Json? // Additional context
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entityType])
  @@index([createdAt])
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  email       String
  role        TeamRole @default(MEMBER)
  permissions Json? // Granular permissions

  invitationToken  String?   @unique
  invitationExpiry DateTime?

  invitedAt  DateTime     @default(now())
  acceptedAt DateTime?
  status     InviteStatus @default(PENDING)

  invitedBy String? // User ID of inviter

  @@unique([userId, email])
  @@index([userId])
  @@index([invitationToken])
  @@index([status])
}

model Notification {
  id     String @id @default(cuid())
  userId String

  type    NotificationType
  title   String
  message String           @db.Text

  // Related entity
  entityType String? // "campaign", "prospect", "email"
  entityId   String?

  // Status
  read   Boolean   @default(false)
  readAt DateTime?

  // Metadata
  metadata  Json? // Additional context
  actionUrl String? // Link to related page

  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model ApiKey {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  key       String @unique // Hashed API key
  keyPrefix String // First 8 chars for display (e.g., "sk_live_")

  // Permissions
  scopes Json // ["campaigns:read", "prospects:write", etc.]

  // Status
  isActive  Boolean   @default(true)
  expiresAt DateTime?

  // Usage tracking
  lastUsedAt   DateTime?
  requestCount Int       @default(0)

  // Rate limiting
  rateLimit Int @default(1000) // Requests per hour

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([key])
  @@index([keyPrefix])
}

model SendingAccount {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Account details
  name     String
  email    String
  provider String // "resend", "gmail", "outlook"

  // Credentials (encrypted)
  credentials Json // API keys, OAuth tokens, etc.

  // Rate limiting
  dailyLimit         Int      @default(50)
  hourlyLimit        Int      @default(10)
  emailsSentToday    Int      @default(0)
  emailsSentThisHour Int      @default(0)
  lastResetDate      DateTime @default(now())
  lastResetHour      DateTime @default(now())

  warmupEnabled    Boolean     @default(true)
  warmupStage      WarmupStage @default(NEW)
  warmupStartDate  DateTime    @default(now())
  warmupDailyLimit Int         @default(20)
  warmupProgress   Int         @default(0) // Days in current stage

  isActive          Boolean   @default(true)
  healthScore       Int       @default(100) // 0-100
  bounceRate        Float     @default(0)
  spamComplaintRate Float     @default(0)
  replyRate         Float     @default(0)
  openRate          Float     @default(0)
  lastHealthCheck   DateTime?
  pausedReason      String?
  pausedAt          DateTime?

  domainReputation Json? // SPF, DKIM, DMARC status
  lastDomainCheck  DateTime?
  blacklistStatus  Json? // Blacklist check results

  // Relationships
  emailLogs EmailLog[]
  schedules SendingSchedule[]
  bounces   EmailBounce[]
  replies   EmailReply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, email])
  @@index([userId])
  @@index([isActive])
  @@index([healthScore])
}

model EmailBounce {
  id         String   @id @default(cuid())
  emailLogId String
  emailLog   EmailLog @relation(fields: [emailLogId], references: [id], onDelete: Cascade)

  sendingAccountId String
  sendingAccount   SendingAccount @relation(fields: [sendingAccountId], references: [id], onDelete: Cascade)

  bounceType     BounceType // HARD, SOFT, COMPLAINT
  bounceReason   String?
  diagnosticCode String?

  recipientEmail String
  bouncedAt      DateTime @default(now())

  @@index([sendingAccountId])
  @@index([bounceType])
  @@index([bouncedAt])
}

model EmailReply {
  id         String   @id @default(cuid())
  emailLogId String
  emailLog   EmailLog @relation(fields: [emailLogId], references: [id], onDelete: Cascade)

  sendingAccountId String?
  sendingAccount   SendingAccount? @relation(fields: [sendingAccountId], references: [id], onDelete: SetNull)

  prospectId String
  prospect   Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  // Reply content
  subject   String
  body      String @db.Text
  fromEmail String

  // AI analysis
  sentiment   ReplySentiment?
  category    ReplyCategory?
  isAutoReply Boolean         @default(false)

  isRead     Boolean   @default(false)
  readAt     DateTime?
  isArchived Boolean   @default(false)
  archivedAt DateTime?

  // Actions taken
  campaignPaused  Boolean @default(false)
  prospectUpdated Boolean @default(false)

  repliedAt  DateTime  @default(now())
  analyzedAt DateTime?

  @@index([prospectId])
  @@index([campaignId])
  @@index([sentiment])
  @@index([repliedAt])
  @@index([isRead])
  @@index([isArchived])
}

model EmailValidationResult {
  id     String @id @default(cuid())
  userId String

  // Email content
  subject        String
  body           String @db.Text
  recipientEmail String

  // Validation scores (0-100)
  overallScore         Int
  spamScore            Int
  personalizationScore Int
  deliverabilityScore  Int

  // Detailed analysis
  spamTriggers           Json // Array of detected spam triggers
  missingPersonalization Json // Array of missing personalization opportunities
  recommendations        Json // Array of improvement suggestions

  // Metadata
  validatedAt DateTime @default(now())

  // Relationships
  emailLogs EmailLog[]

  @@index([userId])
  @@index([overallScore])
  @@index([validatedAt])
}

model SendingSchedule {
  id     String @id @default(cuid())
  userId String

  // Email details
  prospectId String
  prospect   Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  campaignId String?

  subject String
  body    String @db.Text

  // Scheduling
  scheduledFor        DateTime
  timezone            String   @default("America/New_York")
  sendInBusinessHours Boolean  @default(true)

  // Account assignment
  sendingAccountId String?
  sendingAccount   SendingAccount? @relation(fields: [sendingAccountId], references: [id], onDelete: SetNull)

  // Status
  status      ScheduleStatus @default(PENDING)
  processedAt DateTime?
  emailLogId  String?

  // Error handling
  errorMessage String?
  retryCount   Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@index([sendingAccountId])
}

model CreditTransaction {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type       CreditTransactionType
  creditType CreditType // EMAIL or RESEARCH
  amount     Int // Positive for additions, negative for deductions
  balance    Int // Balance after transaction

  // Context
  description String
  entityType  String? // "email", "research", "campaign"
  entityId    String?

  metadata Json? // Additional context

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model CreditPurchase {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  packageId   String // "email_1000", "research_100", etc.
  packageName String

  creditType   CreditType
  creditAmount Int

  // Payment
  amount   Int // Amount in cents
  currency String @default("usd")

  stripePaymentIntentId String? @unique
  stripeSessionId       String? @unique

  status PurchaseStatus @default(PENDING)

  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionTier {
  FREE
  STARTER
  PRO
  AGENCY
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum ProspectStatus {
  ACTIVE
  CONTACTED
  REPLIED
  BOUNCED
  UNSUBSCRIBED
  COMPLETED
}

enum EmailStatus {
  QUEUED
  SENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
}

enum ResearchDepth {
  BASIC
  STANDARD
  DEEP
}

enum PersonalizationLevel {
  LOW
  MEDIUM
  HIGH
  ULTRA
}

enum IntegrationType {
  GMAIL
  OUTLOOK
  RESEND
  OPENAI
  STRIPE
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum NotificationType {
  CAMPAIGN_COMPLETED
  CAMPAIGN_PAUSED
  NEW_REPLY
  PROSPECT_IMPORTED
  EMAIL_BOUNCED
  CREDIT_LOW
  SUBSCRIPTION_EXPIRING
  TEAM_INVITE
  SYSTEM_UPDATE
}

enum ScheduleStatus {
  PENDING
  PROCESSING
  SENT
  FAILED
  CANCELLED
}

enum WarmupStage {
  NEW // 0-7 days: 20 emails/day
  WARMING // 8-14 days: 40 emails/day
  WARM // 15-21 days: 60 emails/day
  ACTIVE // 22-30 days: 80 emails/day
  ESTABLISHED // 30+ days: Full limit
}

enum BounceType {
  HARD // Permanent failure (invalid email)
  SOFT // Temporary failure (mailbox full)
  COMPLAINT // Spam complaint
}

enum ReplySentiment {
  POSITIVE // Interested, wants to learn more
  NEUTRAL // Asking questions, needs info
  NEGATIVE // Not interested, remove me
  AUTO_REPLY // Out of office, auto-responder
}

enum ReplyCategory {
  INTERESTED // Wants to schedule call/demo
  NOT_INTERESTED // Not a fit, not now
  QUESTION // Asking for more information
  OUT_OF_OFFICE // Auto-reply
  UNSUBSCRIBE // Remove from list
  REFERRAL // Forwarded to someone else
}

enum CreditTransactionType {
  PURCHASE // Bought credits
  DEDUCTION // Used credits
  REFUND // Refunded credits
  BONUS // Promotional credits
  SUBSCRIPTION // Monthly subscription credits
}

enum CreditType {
  EMAIL
  RESEARCH
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
